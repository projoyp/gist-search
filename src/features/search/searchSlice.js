import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { searchGists, fetchForks, fetchComments } from './searchAPI';

const initialState = {
  gists: null,
  forks: null,
  comments: null,
  status: 'idle',
};


export const searchGistsAsync = createAsyncThunk(
  '{username}/search?page={page}',
  async (username, page) => {
    const response = await searchGists(username, page);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
export const fetchForksAsync = createAsyncThunk(
  '{id}/forks',
  async (id) => {
    const response = await fetchForks(id);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const fetchCommentsAsync = createAsyncThunk(
  '{id}/comments',
  async (id) => {
    const response = await fetchComments(id);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const searchSlice = createSlice({
  name: 'search',
  initialState,
  reducers: {
    clearGistsList(state) {
      state.gists = null
    },
    clearForksList(state) {
      state.forks = null
    },
    clearCommentList(state) {
      state.comments = null
    },
    clearErrorList(state) {
      state.error = ''
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(searchGistsAsync.pending, (state) => {
        state.status = 'loading-gists';
      })
      .addCase(searchGistsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.gists = [...action.payload.data];
      })
      .addCase(searchGistsAsync.rejected, (state, action) => {
        state.status = 'idle';
        state.error = action.error.message === 'Not Found' ? 'User not found. Try some other username.' : action.error.message;
      })
      .addCase(fetchForksAsync.pending, (state) => {
        state.status = 'loading-forks';
      })
      .addCase(fetchForksAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.forks = [...action.payload.data];
      })
      .addCase(fetchForksAsync.rejected, (state, action) => {
        state.status = 'idle';
        state.error = action.error.message;
      })
      .addCase(fetchCommentsAsync.pending, (state) => {
        state.status = 'loading-comments';
      })
      .addCase(fetchCommentsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.comments = [...action.payload.data];
      })
      .addCase(fetchCommentsAsync.rejected, (state, action) => {
        state.status = 'idle';
        state.error = action.error.message;
      });
  },
});

export const { clearGistsList, clearForksList, clearErrorList, clearCommentList } = searchSlice.actions
export const selectGists = (state) => state.search.gists;
export const selectForks = (state) => state.search.forks;
export const selectComments = (state) => state.search.comments;
export const selectErrors = (state) => state.search.error;
export const selectStatus = (state) => state.search.status;

export default searchSlice.reducer;
